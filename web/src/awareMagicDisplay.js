/**
 * A simple javascript module for displaying waveform event data using png files generated by MagicDisplay
 * @file awareMagicDisplay.js
 * @author Ryan Nichol <r.nichol@ucl.ac.uk>
 */




/**
 * The AwareMagic namespace
 * @namespace
 */
var AwareMagic = {};







/**
 * The UI interface function that gets the run from the runInput form.
 * @returns {number}
 */
function getRunFromForm() {
    return document.getElementById("runInput").value;
    //    return AwareMagic.runNumber;
} 

/**
 * The UI interface function that sets the run on the runInput form.
 */
function setRunOnForm(thisRun) {
    document.getElementById("runInput").value=thisRun;
} 


/**
 * The UI interface function that sets the maximum run on the runInput form.
 */
function setLastRun(thisRun) {
    document.getElementById("runInput").max=thisRun;
} 


/**
 * The UI interface function that gets the event number from the eventNumberInput form.
 * @returns {number}
 */
function getEventNumberFromForm() {
    return document.getElementById("eventNumberInput").value;
} 


/**
 * The UI interface function that sets the event number on the eventNumberInput form.
 */
function setEventNumberOnForm(evNum) {
    document.getElementById("eventNumberInput").value=evNum;
} 

function getEventPngName() {
    return document.getElementById("eventNumberForm").value;
}


/**
 * The UI interface function that gets the next run and then executes nextFunction, which is typically to draw the event
 */
function getNextRun(nextFunction) {
    var runNumber=document.getElementById("runInput").value;
    runNumber++;
    document.getElementById("runInput").value=runNumber;
    nextFunction();
}


/**
 * The UI interface function that gets the previous run and then executes nextFunction, which is typically to draw the event
 */
function getPreviousRun(nextFunction) {
    var runNumber=document.getElementById("runInput").value;
    runNumber--;
    document.getElementById("runInput").value=runNumber;
    nextFunction();
}


/**
 * The UI interface function that gets the next event and then executes nextFunction, which is typically to draw the event
 */
function getNextEvent(nextFunction) {
    if(AwareMagic.eventIndex<AwareMagic.pngList.length-1) AwareMagic.eventIndex++;
    $('#eventNumberForm').val(AwareMagic.pngList[AwareMagic.eventIndex]);
    nextFunction();
}


/**
 * The UI interface function that gets the previous event and then executes nextFunction, which is typically to draw the event
 */
function getPreviousEvent(nextFunction) {
    if(AwareMagic.eventIndex>0) AwareMagic.eventIndex--;
    $('#eventNumberForm').val(AwareMagic.pngList[AwareMagic.eventIndex]);
    nextFunction();
}


/**
 * The UI interface function that is executed when the play button is pressed. The code executes getNextEvent at am interval specified by the speedSlide form.
 */
function playEvents() {
   if(document.getElementById("playButton").value=='Play') {
      document.getElementById("playButton").value='Stop';
      var playInt=document.getElementById("speedSlide").value;
      AwareMagic.playVar=setInterval(function(){getNextEvent(plotEvent())},(10000/playInt));
   }
   else {
      document.getElementById("playButton").value='Play';
      clearInterval(AwareMagic.playVar);
   }
}





/**
 * The UI interface function that gets the instrument name from the instrumentForm.
* @returns {string}
 */ 
function getInstrumentNameFromForm() {
    return document.getElementById("instrumentForm").value;
}






/**
 * The function that updates both the plot title and the URL in the lcoation bar, to ensure if reload is hit that same event display is returned. This works at some level but does not remember things like the xAutoScale
 */
function updatePlotTitle(jsonObject) {
    //Also update the page URL
    var currentUrl = [location.protocol, '//', location.host, location.pathname].join('');
    //    var currentUrl = window.location.href;
    currentUrl=currentUrl+"?run="+getRunFromForm()+"&instrument="+getInstrumentNameFromForm()+"&eventNumber="+getEventNumberFromForm()+"&eventIndex="+getEventIndexFromForm();
    var stateObj = { foo: "bar" };
    history.replaceState(stateObj, "page 2", currentUrl);

    var titleContainer = $("#titleContainer"); 
    titleContainer.empty();
    titleContainer.append("<h1>"+getInstrumentNameFromForm()+" -- Run "+jsonObject.event.run+"</h1>");
    titleContainer.append("<h2>Event: "+jsonObject.event.eventNumber+" -- Time: "+jsonObject.event.time+" -- Trigger: "+jsonObject.event.triggerTime+"</h2>");
    
}


/**
* The function that is actually called to plot the event
*/
function plotEvent() {
    titleContainer=$("#titleContainer");
    titleContainer.empty();
    titleContainer.append("<h2>Boo</h2>");
    $("#debugContainer").append("<p>"+getEventPngName()+"</p>");
    $("#divEvent").empty();
    $("#divEvent").append("<img class=\"magicDisplay\" src=\""+getEventPngName()+"\">");


}

function updateEventList() {
    
    $('#eventNumberForm').empty();
    
    function handleEventNumberList(eventNumberArray) {
	AwareMagic.eventList = new Array();
	AwareMagic.pngList = new Array();

        var pngName="";
        for(var i=0;i<eventNumberArray.length;i++) {
            pngName=eventNumberArray[i].name;
            event=eventNumberArray[i].event;
	    AwareMagic.pngList.push(pngName);
	    AwareMagic.eventList.push(event);
	    AwareMagic.eventIndex=i;
            $('<option/>').val(pngName).html(event).appendTo('#eventNumberForm');
        }
        $('#eventNumberForm').val(pngName);
	plotEvent();
    }
    
    eventNumberUrl="pngCrawler.php?run="+getStartRunFromForm();
    
    
    ajaxLoadingLog(eventNumberUrl);
    $.ajax({
            url: eventNumberUrl,
		type: "GET",
		dataType: "json",
		success: handleEventNumberList,
		error: handleAjaxError
		});   
}



function initialiseAwareMagicDisplay() {


      var docHeight=$(window).height();
      var docWidth=$(window).width();
      var heightPercentage=100;
      if(docWidth>=800) heightPercentage=100;

      var maxPlotHeight=Math.round((heightPercentage*docHeight)/100);
      $('#divEvent').height(maxPlotHeight); 


      function updateLastRun(setStartToLast) {
	var tempString="output/"+getInstrumentNameFromForm()+"/lastEvent";
	
	function actuallyUpdateLastRun(runString) {
	  setLastRun(Number(runString));
	  if(setStartToLast) {
	      setRunOnForm(Number(runString));
	      updateEventList();
	  }
	}
	
	if(setStartToLast) {
	  $('#titleContainer').empty();
	  $('#titleContainer').append("<h2>Fetching most recent run</h2>");
	}
	

	$.ajax({
	  url: tempString,
	      type: "GET",
	      dataType: "text", 
	      success: actuallyUpdateLastRun
	      }); 
	
      }

      $.urlParam = function(name){
	var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(window.location.href);
	if(results != null) {
	  return results[1];
	}
	return null;
      }

      

  
      
      //This is something to do with the touch interface
      document.body.addEventListener('touchmove', function(event) {
				       event.preventDefault();
				     }, false);   
      
      
      run=document.getElementById("runForm").value;
      var runAlreadySet=false;
      if($.urlParam('run')) {
	run=$.urlParam('run');
	runAlreadySet=true;
      }


      if(!runAlreadySet) {
	updateLastRun(true);
      }
      else {
	updateLayoutForm();
      }




      $('#instrumentForm').change(function() {
				    setEventIndexOnForm(0);
				    runAlreadySet=false;
				    updateLayoutForm();
				    updateLastRun(true);
				  });



      $('#eventIndexInput').change(function() {
				     plotEvent();
				   });

      $('#eventNumberForm').change(function() {
	      plotEvent();
	  });
      $('#debugContainer').hide();
      $('#instrumentDiv').hide();



      $('#refreshButton').click(function() {
				  plotEvent();
				});

}

